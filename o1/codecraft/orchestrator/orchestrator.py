import os
import tempfile
import shutil
import json
import logging
from codecraft.git.git_manager import GitManager
from codecraft.sandbox.sandbox_manager import SandboxManager
from codecraft.llm.llm_service import LLMService

class Orchestrator:
    def __init__(self, sandbox_manager=None, llm_service=None):
        self.sandbox_manager = sandbox_manager or SandboxManager()
        self.llm_service = llm_service or LLMService()

    def detect_tech_stack(self, project_path: str) -> str:
        techs = []
        pkg_json = os.path.join(project_path, "package.json")
        if os.path.isfile(pkg_json):
            try:
                with open(pkg_json, "r") as f:
                    pkg = json.load(f)
                    tech = "Node.js"
                    deps = list((pkg.get("dependencies") or {}).keys())
                    devdeps = list((pkg.get("devDependencies") or {}).keys())
                    main_libs = deps[:3] if deps else (devdeps[:3] if devdeps else [])
                    if main_libs:
                        tech += f" ({', '.join(main_libs)})"
                    techs.append(tech)
            except Exception:
                techs.append("Node.js")
        req_file = os.path.join(project_path, "requirements.txt")
        if os.path.isfile(req_file):
            tech = "Python"
            try:
                with open(req_file, "r") as f:
                    reqs = [line.strip() for line in f if line.strip() and not line.startswith('#')]
                    if reqs:
                        tech += f" ({', '.join(reqs[:3])})"
            except Exception:
                pass
            techs.append(tech)
        pyproj = os.path.join(project_path, "pyproject.toml")
        if os.path.isfile(pyproj):
            if not any(t.startswith("Python") for t in techs):
                techs.append("Python")
        pom_file = os.path.join(project_path, "pom.xml")
        if os.path.isfile(pom_file):
            techs.append("Java (Maven)")
        gradle_file = os.path.join(project_path, "build.gradle")
        if os.path.isfile(gradle_file):
            techs.append("Java (Gradle)")
        if not techs:
            techs.append("Unknown Tech Stack")
        return "; ".join(techs)

    def run(self, task_description: str, repo_url: str, base_branch: str) -> str:
        working_dir = tempfile.mkdtemp(prefix="codecraftai_")
        git_manager = GitManager(self.sandbox_manager, repo_url, base_branch, working_dir, github_token=os.getenv("GITHUB_TOKEN"))
        try:
            logging.info("Cloning repository...")
            git_manager.clone_repository()
            branch_name = git_manager.create_branch()
            logging.info(f"New branch: {branch_name}")
            tech_summary = self.detect_tech_stack(working_dir)
            logging.info(f"Detected tech: {tech_summary}")
            plan_text = self.llm_service.generate_plan(task_description, tech_summary)
            plan_file_path = os.path.join(working_dir, "AI_PLAN.md")
            with open(plan_file_path, "w") as f:
                f.write("# AI-generated Implementation Plan\n\n" + plan_text + "\n")
            git_manager.commit_all_changes("Add AI-generated implementation plan")
            git_manager.push_branch(branch_name)
            pr_title = task_description[:60] + "..." if len(task_description) > 60 else task_description
            pr_body = f"**Task Description:** {task_description}\n\n**Implementation Plan (generated by AI):**\n\n{plan_text}\n"
            return git_manager.create_pull_request(pr_title, pr_body)
        finally:
            try:
                shutil.rmtree(working_dir)
            except Exception as e:
                logging.warning(f"Could not remove temp dir: {e}")
